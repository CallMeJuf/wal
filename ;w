#!/usr/bin/env bash
#
# wol - Generate and change colorschemes on the fly.
#
# Depends on: feh, imagemagick

# Speed up script by not using unicode.
export LC_ALL=C
export LANG=C

shopt -s nullglob nocasematch

# Options

# Folder to source wallpapers from by default.
wal="$HOME/Pictures/Wallpapers"

# Cache dir
cache_dir="$HOME/.cache/wal"
mkdir -p "${cache_dir}/schemes"

# Internal variables.
newline=$'\n'

rand_img() {
    files=("${wal%/}"/*.{png,jpg,jpeg})
    files=("${files[@]/"$old_wall"}")
    wal="${files[RANDOM % ${#files[@]}]}"

    # If the shuffle fails (rare) set the image to the first element.
    [[ ! -f "$wal" ]] && wal="${files[0]}"

    # Cache the wallpaper name
    printf "%s\n" "$wal" > "${cache_dir}/wal"
}

get_colors() {
    # Get the current wallpaper.
    old_wall="$(< "${cache_dir}/wal" 2>/dev/null)"

    # Shuffle the image
    [[ -d "$wal" ]] && rand_img

    cache_file="${cache_dir}/schemes/${wal//\/}"

    if [[ -f "$cache_file" ]]; then
        colors=($(< "$cache_file"))
    else
        colors=($(convert "${wal}"  +dither -colors 16 -unique-colors txt:- | grep -E -o " \#.{6}"))

        # Cache the scheme
        printf "%s\n" "${colors[@]}" > "$cache_file"
    fi
}

set_color() {
    sequences+="\033]4;${1};${2}\007"
    x_colors+="*color${1}: ${2}${newline}"
}

set_special() {
    sequences+="\033]${1};${2}\007"

    # Set X colors
    case "$1" in
        10) x_colors+="*foreground: ${2}${newline}" ;;
        11) x_colors+="*background: ${2}${newline}" ;;
        12) x_colors+="*cursor: ${2}${newline}" ;;
    esac
}

create_sequences() {
    set_special 10  "${colors[15]}"
    set_special 11  "${colors[0]}"
    set_special 12  "${colors[15]}"
    set_special 13  "${colors[15]}"
    set_special 14  "${colors[0]}"
    set_special 708 "${colors[0]}"

    set_color 0  "${colors[0]}"
    set_color 1  "${colors[9]}"
    set_color 2  "${colors[10]}"
    set_color 3  "${colors[11]}"
    set_color 4  "${colors[12]}"
    set_color 5  "${colors[13]}"
    set_color 6  "${colors[14]}"
    set_color 7  "${colors[15]}"
    set_color 8  "${colors[8]}"
    set_color 9  "${colors[9]}"
    set_color 10 "${colors[10]}"
    set_color 11 "${colors[11]}"
    set_color 12 "${colors[12]}"
    set_color 13 "${colors[13]}"
    set_color 14 "${colors[14]}"
    set_color 15 "${colors[15]}"
}

send_sequences() {
    create_sequences

    for term in /dev/pts/[0-9]*; do
        printf "%b" "$sequences" > "$term" &
    done
}

get_de() {
    # Taken from Neofetch.
    de="${XDG_CURRENT_DESKTOP}"

    # Fallback to using xprop.
    [[ -n "$DISPLAY" && -z "$de" ]] && \
        de="$(xprop -root | awk '/KDE_SESSION_VERSION|^_MUFFIN|xfce4|xfce5/')"
}

set_wallpaper() {
    get_de

    case "$de" in
        *"MUFFIN"* | *"Cinnamon"*) gsettings set org.cinnamon.desktop.background picture-uri "$wal" ;;
        *"MATE"*) gsettings set org.mate.background picture-filename "$wal" ;;
        *"XFCE"*) xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitor0/image-path --set "$wal" ;;
        *)
            if type -p feh >/dev/null; then
                feh --bg-fill "$wal"

            elif type -p nitrogen >/dev/null; then
                nitrogen --set-zoom-fill "$wal"

            else
                gsettings set org.gnome.desktop.background picture-uri "$wal"
            fi
        ;;
    esac
}

export_colors() {
    # Merge the colors into the X db so new terminals use them.
    xrdb -merge >/dev/null 2>%1 <<< "$x_colors"
}

reload_env() {
    # Reload i3
    i3-msg reload >/dev/null &

    # Reload lemonbar
    pkill bar
    bar "${colors[15]}" "${colors[0]}" &

    # Reload dunst
    pkill dunst
    dunst \
        -lb "${colors[15]}" \
        -nb "${colors[15]}" \
        -cb "${colors[15]}" \
        -lf "${colors[0]}"  \
        -bf "${colors[0]}"  \
        -cf "${colors[9]}" &
}


get_args() {
    while getopts ":ci:" opt; do
        case "$opt" in
            "c") rm -rf "$cache_dir" ;;
            "i")
                if [[ -d "$OPTARG" || -f "$OPTARG" ]]; then
                    wal="$OPTARG"

                else
                    printf "%s\n" "Image/Directory doesn't exist: $OPTARG" >&2
                    exit 1
                fi
            ;;

            "?")
                printf "%s\n" "Invalid option: -$OPTARG" >&2
                exit 1
            ;;

            ":")
                printf "%s\n" "Option -$OPTARG requires an argument." >&2
                exit 1
            ;;
        esac
    done
}

main () {
    get_args "$@"

    # Get 16 unique colors from the image.
    get_colors

    # Generate a pallete.
    create_sequences

    # Send the color changing sequences to every open terminal emulator.
    send_sequences

    # Set the wallpaper.
    set_wallpaper &

    # Save the colorscheme to the Xresources db.
    export_colors
    reload_env >/dev/null 2>&1
}

main "$@"
